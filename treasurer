#!/usr/bin/env python
# coding=utf-8

#
# Copyright (c) dtk <dtk@gmx.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#


import argparse
import gnomekeyring
import pynotify
import logging
import subprocess
import sys


# poor man's substitute for a config file    
APP_NAME = 'The Treasurer'
ask_password_cmd = ['zenity', '--entry', '--hide-text',
                             '--title', APP_NAME, '--text']



class Treasurer(object):

    def __init__(self, clerk, keyring):
    
        self.clerk = clerk
        self.keyring = keyring

        # check keyring daemon
        if not gnomekeyring.is_available():
            clerk.inform_and_close('Gnome Keyring Daemon is not available')

        # check keyring
        if not self.keyring in gnomekeyring.list_keyring_names_sync():
            clerk.inform_and_close('There is no keyring with name \'{}\''.format(
                self.keyring))


    def get_password(self, hint):
        '''
        Retrieve the password that belongs to the given hint
        '''
        password = None
        try:
            for casket in gnomekeyring.list_item_ids_sync(self.keyring):
                secret = gnomekeyring.item_get_info_sync(self.keyring, casket)
                if secret.get_display_name() == hint:
                    password = secret.get_secret()
                    break
        except gnomekeyring.IOError:
            # the keyring is (probably) locked
            # ask for the key to unlock it
            keyring_pass = clerk.ask_for_keyring_pass(self.keyring)
            try:
                gnomekeyring.unlock_sync(self.keyring, keyring_pass)
                password = self.get_password(hint)
            except gnomekeyring.IOError:
                clerk.inform_and_close('The password for keyring \'{}\''
                                  ' was incorrect'.format(self.keyring))

        return password


class Clerk(object):
    '''
    A rather unqualified but useful helper 
    than handles the communication with the customer
    '''

    def __init__(self, app_name):

        self.app_name = app_name

        # initialize notifications
        if not pynotify.init(app_name):
            logging.error('Could not initialize notification mechanism!')
            sys.exit(1)
        

    def inform_and_close(self, notification):
        '''
        Notify the user and exit with an error
        '''
        notification = pynotify.Notification(self.app_name, notification)
        notification.set_urgency(pynotify.URGENCY_CRITICAL)
        
        if not notification.show():
            logging.error('Cannot display notification!')

        sys.exit(1)


    def ask_for_keyring_pass(self, keyring):
        '''
        Ask the customer for the password to the given keyring
        '''
        try:
            ask_password_cmd.append(
                'Please enter the password to unlock the keyring \'{0}\''.format(
                    keyring))
            keyring_password = subprocess.check_output(ask_password_cmd)
            return keyring_password.strip()
        except subprocess.CalledProcessError:
            self.inform_and_close('No password was provided')


#
# main
#
if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Inquire the'
                        ' gnome-keyring-daemon for a password')

    parser.add_argument('hint', help='the identifier of the sought-after password')
    parser.add_argument('-k', '--keyring', default='login', 
                        help='the keyring that is to be searched for the password')

    args = parser.parse_args()

    # start the business
    clerk = Clerk(APP_NAME)
    treasurer = Treasurer(clerk, args.keyring)

    # get password
    password = treasurer.get_password(args.hint)
    if password:
        print password
        sys.exit(0)
    else:
        clerk.inform_and_close('Cannot find password for \'{}\' in keyring'
                               ' \'{}\''.format(args.hint, args.keyring))
