#!/usr/bin/env python
# coding=utf-8

#
# Copyright (c) dtk <dtk@gmx.de>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#


import sys
import os
import re
import logging
import argparse
import subprocess

import pynotify
import gnomekeyring


# poor man's substitute for a config file    
APP_NAME = 'The Treasurer'
ask_password_cmd = ['zenity', '--entry', '--hide-text',
                             '--title', APP_NAME, '--text']

class keyring_errors(object):
    '''
    Encapsulate keyring error messages enum style.
    Lend semantic meaning to generic exceptions.
    '''
    LOCKED_KEYRING = 'Cannot get secret of a locked object'
    WRONG_PASSWORD = 'The password was incorrect'


class Treasurer(object):

    def __init__(self, clerk, keyring):
    
        self.clerk = clerk
        self.keyring = keyring

        # check keyring daemon
        if not gnomekeyring.is_available():
            clerk.close_shop('Gnome Keyring Daemon is not available')

        # check keyring
        if not self.keyring in gnomekeyring.list_keyring_names_sync():
            clerk.close_shop('There is no keyring with name "{}"'.format(
                self.keyring))


    def get_password(self, hint):
        '''
        Retrieve the password that belongs to the given hint
        '''
        password = None
        try:
            for casket in gnomekeyring.list_item_ids_sync(self.keyring):
                secret = gnomekeyring.item_get_info_sync(self.keyring, casket)
                if secret.get_display_name() == hint:
                    password = secret.get_secret()
                    break
        except gnomekeyring.IOError:
            keyring_error = clerk.get_keyring_error()
            if clerk.is_problem(keyring_errors.LOCKED_KEYRING, keyring_error):
                # the keyring is locked - ask for the key to unlock it
                keyring_pass = clerk.ask_for_keyring_pass(self.keyring)
                try:
                    gnomekeyring.unlock_sync(self.keyring, keyring_pass)
                    password = self.get_password(hint)
                except gnomekeyring.IOError:
                    keyring_error = clerk.get_keyring_error()
                    if clerk.is_problem(keyring_errors.WRONG_PASSWORD, keyring_error):
                        clerk.close_shop('The password for keyring "{}"'
                                        ' was incorrect'.format(self.keyring))
                    else:
                        clerk.close_shop(keyring_error)
            else:
                clerk.close_shop(keyring_error)

        return password


    def lock_keyring(self):
        try:
            gnomekeyring.lock_sync(self.keyring)
        except gnomekeyring.NoSuchKeyringError:
            clerk.close_shop('Could not lock keyring "{}"'.format(
                                    self.keyring))


class Clerk(object):
    '''
    A rather unqualified but useful helper 
    than handles the communication with the customer
    '''

    def __init__(self, app_name):

        self.app_name = app_name

        # initialize notifications
        if not pynotify.init(app_name):
            logging.error('Could not initialize notification mechanism!')
            sys.exit(1)
       
        # overhear STDERR 
        self.keyring_errors, error_adaptor = os.pipe()
        os.dup2(error_adaptor, 2)


    def close_shop(self, notification):
        '''
        Notify the user and exit with an error
        '''
        notification = pynotify.Notification(self.app_name, notification)
        notification.set_urgency(pynotify.URGENCY_CRITICAL)
        
        if not notification.show():
            logging.error('Cannot display notification!')

        sys.exit(1)


    def ask_for_keyring_pass(self, keyring):
        '''
        Ask the customer for the password to the given keyring
        '''
        try:
            ask_password_cmd.append(
                'Please enter the password to unlock the keyring "{}"'.format(
                    keyring))
            keyring_password = subprocess.check_output(ask_password_cmd)
            return keyring_password.strip()
        except subprocess.CalledProcessError:
            self.close_shop('No password was provided')


    def get_keyring_error(self):
        '''
        Read the error message the C lib printed to STDERR and
        do some pretty printing
        '''
        return os.read(self.keyring_errors, 1024).split(':')[-1].strip()


    def is_problem(self, expected, actual):
        '''
        Check whether the actual error matches the expected one
        '''
        return re.search(expected, actual)
#
# main
#
if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Inquire the'
                        ' gnome-keyring-daemon for a password')

    parser.add_argument('hint', help='the identifier of the sought-after password')
    parser.add_argument('-k', '--keyring', default='login', 
                        help='the keyring that is to be searched for the password')
    parser.add_argument('-l', '--lock', action='store_true',
                        help='lock the keyring after the query')

    args = parser.parse_args()

    # start the business
    clerk = Clerk(APP_NAME)
    treasurer = Treasurer(clerk, args.keyring)

    # get password
    password = treasurer.get_password(args.hint)
    if password:
        print password
    else:
        clerk.close_shop('Cannot find password for "{}" in keyring'
                               ' "{}"'.format(args.hint, args.keyring))

    # lock keyring before leaving?
    if args.lock:
        treasurer.lock_keyring()

    sys.exit(0)
